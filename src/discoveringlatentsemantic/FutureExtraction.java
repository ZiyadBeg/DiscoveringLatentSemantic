/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package discoveringlatentsemantic;

import cc.mallet.pipe.CharSequence2TokenSequence;
import cc.mallet.pipe.CharSequenceLowercase;
import cc.mallet.pipe.Pipe;
import cc.mallet.pipe.SerialPipes;
import cc.mallet.pipe.TokenSequence2FeatureSequence;
import cc.mallet.pipe.TokenSequenceRemoveStopwords;
import cc.mallet.pipe.iterator.CsvIterator;
import cc.mallet.topics.ParallelTopicModel;
import cc.mallet.types.Alphabet;
import cc.mallet.types.FeatureSequence;
import cc.mallet.types.IDSorter;
import cc.mallet.types.InstanceList;
import cc.mallet.types.LabelSequence;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.GradientPaint;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.InputStreamReader;
import java.io.Reader;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Iterator;
import java.util.TreeSet;
import java.util.Vector;
import java.util.regex.Pattern;
import javax.swing.table.DefaultTableModel;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.axis.CategoryAxis;
import org.jfree.chart.axis.CategoryLabelPositions;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.renderer.category.BarRenderer;
import org.jfree.data.category.CategoryDataset;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.ui.ApplicationFrame;
import org.jfree.ui.RefineryUtilities;

/**
 *
 * @author Elcot
 */
public class FutureExtraction extends javax.swing.JFrame {

    /**
     * Creates new form NamedEntityRecognition
     */
    public static ArrayList allwordsintrainingDocuments=new ArrayList();
    public static DecimalFormat df=new DecimalFormat("#.####");
    public static ArrayList allfeatures=new ArrayList();
    static String topicRes = "TOPIC\tWEIGHT\n\n";
    
    public FutureExtraction() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(153, 0, 153));

        jLabel1.setFont(new java.awt.Font("Andalus", 0, 36)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Future Extraction");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(223, 223, 223)
                .addComponent(jLabel1)
                .addContainerGap(245, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(33, 33, 33))
        );

        jButton1.setText("Feature Extraction");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jTextArea1.setColumns(20);
        jTextArea1.setFont(new java.awt.Font("Calibri", 0, 15)); // NOI18N
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        jButton2.setText("Fuzzy Clustering");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("K-Prototype Clustering");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("View Comparison Graph");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGap(49, 49, 49)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 632, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(27, 27, 27)
                        .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(27, 27, 27)
                        .addComponent(jButton4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(27, 27, 27)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 31, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:       
        String filename="stopwords1.txt";
        ArrayList stop1=stopWords(filename);
        
        String path = "Web Documents/";  
        String files;
        File folder = new File(path);
        File[] listOfFiles = folder.listFiles(); 
        int count=0;
        String tds="";
        for (int i = 0; i < listOfFiles.length; i++) 
        { 
            if (listOfFiles[i].isFile()) 
            {
                count++;
                files = listOfFiles[i].getName();
                String fname1="Web Documents/"+files;
                String convertrainingdoc=browse(fname1);        
                System.out.println("Conversation Training Document - "+count);
                System.out.println("--------------------------------------------------------------------------------------");
                System.out.println(convertrainingdoc);
                System.out.println("--------------------------------------------------------------------------------------");
                System.out.println();                    
                String sp[]=convertrainingdoc.split("\n");
                for(int j=0;j<sp.length;j++)
                {
                    String content=sp[j].trim().replaceAll("\n"," ");                    
                    tds=tds+content.trim()+" ";
                    String sp2[]=content.trim().split(" ");
                    for(int k=0;k<sp2.length;k++)
                    {
                        if(!(stop1.contains(sp2[k].trim().replaceAll("[^\\w\\s]", "").toLowerCase())))
                        {
                            allwordsintrainingDocuments.add(sp2[k].trim().replaceAll("[^\\w\\s]", "").toLowerCase());
                        }
                    }
                }
                tds += "\n";
            }
        }
        String trainingdataset=tds.substring(0,tds.lastIndexOf('\n'));
        try
        {
            String fname1="FILE/training.txt";
            File fe=new File(fname1);            
            FileOutputStream fos=new FileOutputStream(fe);
            fos.write(trainingdataset.trim().getBytes());
            fos.close();
        }
        catch(Exception e)
        {
            e.printStackTrace();
        }
        
        System.out.println("Feature Extraction Using Latent Dirichlet Allocation (LDA)");
        System.out.println("***********************************************************");
        System.out.println();                   
        ArrayList top=latentDirichletAllocation("FILE/training.txt");                        
        System.out.println(top.size()+" main Features Extracted from Web Documents!");
        System.out.println("Wait until Feature Extraction!");         
        System.out.println("Features\n------------------\n");
        String ro="";
        for(int k=0;k<top.size();k++)
        {            
            String topic=top.get(k).toString().trim();
            System.out.println(k+"-->"+topic);
            ro=ro+k+" --> "+topic+"\n";
            allfeatures.add(topic.trim().toLowerCase());
        }
        String features=ro.substring(0,ro.lastIndexOf('\n'));
        jTextArea1.setText(topicRes);
        //String features=featureExtraction(top);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        FuzzyClustering fc=new FuzzyClustering();
        fc.setTitle("Fuzzy Clustering");
        fc.setVisible(true);
        fc.setResizable(false);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        KPrototypeClustering fc=new KPrototypeClustering();
        fc.setTitle("K-Prototype Clustering");
        fc.setVisible(true);
        fc.setResizable(false);
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
        final BarChartDemo1 demo1 = new BarChartDemo1("Comparison Graph");
        demo1.pack();
        RefineryUtilities.centerFrameOnScreen(demo1);
        demo1.setVisible(true);
        
        final SpaceComplaxityGraph scg = new SpaceComplaxityGraph("Comparison Graph");
        scg.pack();
        RefineryUtilities.centerFrameOnScreen(scg);
        scg.setVisible(true);
    }//GEN-LAST:event_jButton4ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FutureExtraction.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FutureExtraction.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FutureExtraction.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FutureExtraction.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FutureExtraction().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    // End of variables declaration//GEN-END:variables

    private static ArrayList latentDirichletAllocation(String filEtrainingtxt) {
        ArrayList top=new ArrayList();
        try
        {            
            ArrayList<Pipe> pipeList = new ArrayList<Pipe>();        
            pipeList.add( new CharSequenceLowercase() );
            pipeList.add( new CharSequence2TokenSequence(Pattern.compile("\\p{L}[\\p{L}\\p{P}]+\\p{L}")) );
            pipeList.add( new TokenSequenceRemoveStopwords(new File("stoplists/en.txt"), "UTF-8", false, false, false) );
            pipeList.add( new TokenSequence2FeatureSequence() );
            InstanceList instances = new InstanceList (new SerialPipes(pipeList));
            Reader fileReader = new InputStreamReader(new FileInputStream(new File(filEtrainingtxt)), "UTF-8");
            instances.addThruPipe(new CsvIterator (fileReader, Pattern.compile("^(\\S*)[\\s,]*(\\S*)[\\s,]*(.*)$"),3, 2, 1));        
            int numTopics = 5;
            ParallelTopicModel model = new ParallelTopicModel(numTopics, 1.0, 0.01);            
            model.addInstances(instances);
            model.setNumThreads(2);
            model.setNumIterations(20);
            model.estimate();
            Alphabet dataAlphabet = instances.getDataAlphabet();
            FeatureSequence tokens = (FeatureSequence) model.getData().get(0).instance.getData();
            LabelSequence topics = model.getData().get(0).topicSequence; 
            ArrayList<TreeSet<IDSorter>> topicSortedWords = model.getSortedWords();
            String res="";
            int count = 0;
            for (int topic = 0; topic < numTopics; topic++) 
            {
                count++;
                Iterator<IDSorter> iterator = topicSortedWords.get(topic).iterator();            
                int rank = 0;
                while (iterator.hasNext() && rank < 5) 
                {
                    
                    IDSorter idCountPair = iterator.next();                    
                    String s1=dataAlphabet.lookupObject(idCountPair.getID()).toString();
                    if(!top.contains(s1))
                    {
                        top.add(s1);
                        res=res+s1+"\n";
                        topicRes += s1 + "\t" + idCountPair.getWeight() + "\n";
                    }
                    rank++;
                }                
            }
        }
        catch(Exception e)
        {
            e.printStackTrace();
        }
        return top;
    }

    private static String browse(String fname) {
        String ds="";
        try
        {
            File fe=new File(fname);		
            FileInputStream fis=new FileInputStream(fe);
            byte data[]=new byte[fis.available()];
            fis.read(data);
            fis.close();
            String str=new String(data);
            ds=str.trim();
        }
        catch(Exception e)
        {
            e.printStackTrace();
        }
        return ds;
    } 

    public static ArrayList stopWords(String filename) {
        ArrayList stop1=new ArrayList();
        try
        {
            File fe2=new File(filename);
            FileInputStream fis2=new FileInputStream(fe2);
            byte data2[]=new byte[fis2.available()];
            fis2.read(data2);
            fis2.close();                
            String sg2[]=new String(data2).split("\n");               
            for(int i=0;i<sg2.length;i++)
                stop1.add(sg2[i].trim());
        }
        catch(Exception e)
        {
            e.printStackTrace();
        }
        return stop1;
    }

    private static String featureExtraction(ArrayList top) {
                
        String ro="";
        //for(int k=0;k<10;k++)
        for(int k=0;k<top.size()/2;k++)
        {            
            String topic=top.get(k).toString().trim();
            System.out.println(k+"-->"+topic);
            int topicfrequency=Collections.frequency(allwordsintrainingDocuments, topic.toLowerCase().trim());
            double topicprobability=(double)topicfrequency/(double)allwordsintrainingDocuments.size();              //p(z)
            for(int j=0;j<allwordsintrainingDocuments.size();j++)
            {
                String word=allwordsintrainingDocuments.get(j).toString().trim();
                int wordfrequency=Collections.frequency(allwordsintrainingDocuments, word.toLowerCase().trim());
                //System.out.println("Word Frequency: "+wordfrequency);
                double wordprobability=(double)wordfrequency/(double)allwordsintrainingDocuments.size();            //p(w)
                
                        /* p(z|w) = p(z) + p(w) - p(z&w) */
                        /* p(z&w) = p(z) * p(w) */                      //see example in http://iimk.ac.in/gsdl/cgi-bin/library?e=d-000-00---0statis--00-0-0--0prompt-10---4------0-1l--1-en-50---20-about---00031-001-1-0utfZz-8-10&a=d&cl=CL2&d=HASH01ace0b56e52233eff0303bc.4
                
                double pofzandw=topicprobability*wordprobability;   
                double pofzorw=topicprobability+wordprobability-pofzandw;
                ro=ro+topic+"\t"+word+"\t"+df.format(pofzorw)+"\n";                               
            }            
        }
        String topicmodel=ro.substring(0,ro.lastIndexOf('\n'));
        return topicmodel;
    }

    class BarChartDemo1 extends ApplicationFrame 
    {

    /**
     * Creates a new demo instance.
     *
     * @param title  the frame title.
     */
        
    public BarChartDemo1(final String title) {

        super(title);
        final CategoryDataset dataset = createDataset();
        final JFreeChart chart = createChart(dataset);
        final ChartPanel chartPanel = new ChartPanel(chart);
        chartPanel.setPreferredSize(new Dimension(800, 600));
        setContentPane(chartPanel);        
    }

    /**
     * Returns a sample dataset.
     * 
     * @return The dataset.
     */
    private CategoryDataset createDataset() {
        
        
        // create the dataset...
        final DefaultCategoryDataset dataset = new DefaultCategoryDataset();
        
        try
        {                                                                                                                       
//            System.out.println("Original Fuzzy: "+FuzzyClustering.fuzzyexetime);
//            System.out.println("Original K-proto: "+KPrototypeClustering.kprotoexetime);
//            if((double)FuzzyClustering.fuzzyexetime>(double)KPrototypeClustering.kprotoexetime)
//            {                
                dataset.addValue((double)FuzzyClustering.fuzzyexetime,"Fuzzy","Fuzzy");  
                double val2=((double)KPrototypeClustering.kprotoexetime);
                dataset.addValue(val2,"K-Prototype","K-Prototype");                                                        
//            }
//            else
//            {
//                double r=(Math.random()*50);
//                double val=(double)KPrototypeClustering.kprotoexetime-(double)FuzzyClustering.fuzzyexetime;
//                double val1=((double)FuzzyClustering.fuzzyexetime)+val+r;
//                double val2=((double)KPrototypeClustering.kprotoexetime)+700;
//                System.out.println("Duplicated Fuzzy: "+val1);
//                System.out.println("Duplicated K-proto: "+KPrototypeClustering.kprotoexetime);
//                dataset.addValue(val1,"Fuzzy","Fuzzy");  
//                dataset.addValue(val2,"K-Prototype","K-Prototype");                
//            }
        }
        catch(Exception e1)
        {
            e1.printStackTrace();
        }                                                                             
                     
        return dataset;        
    }
    
    /**
     * Creates a sample chart.
     * 
     * @param dataset  the dataset.
     * 
     * @return The chart.
     */
    private JFreeChart createChart(final CategoryDataset dataset) {
        
        // create the chart...
        final JFreeChart chart = ChartFactory.createBarChart(
            "Time Complexity",         // chart title
            "Algorithm",               // domain axis label
            "Execution Time (in Milliseconds)",                  // range axis label
            dataset,                  // data
            PlotOrientation.VERTICAL, // orientation
            true,                     // include legend
            true,                     // tooltips?
            false                     // URLs?
        );

        // NOW DO SOME OPTIONAL CUSTOMISATION OF THE CHART...

        // set the background color for the chart...
        chart.setBackgroundPaint(Color.white);

        // get a reference to the plot for further customisation...
        final CategoryPlot plot = chart.getCategoryPlot();
        plot.setBackgroundPaint(Color.lightGray);
        plot.setDomainGridlinePaint(Color.white);
        plot.setRangeGridlinePaint(Color.white);

        // set the range axis to display integers only...
        final NumberAxis rangeAxis = (NumberAxis) plot.getRangeAxis();
        //rangeAxis.setStandardTickUnits(NumberAxis.createIntegerTickUnits());

        // disable bar outlines...
        final BarRenderer renderer = (BarRenderer) plot.getRenderer();
        renderer.setDrawBarOutline(false);
        
        // set up gradient paints for series...
        final GradientPaint gp0 = new GradientPaint(
            0.0f, 0.0f, Color.blue, 
            0.0f, 0.0f, Color.lightGray
        );
        final GradientPaint gp1 = new GradientPaint(
            0.0f, 0.0f, Color.green, 
            0.0f, 0.0f, Color.lightGray
        );
        final GradientPaint gp2 = new GradientPaint(
            0.0f, 0.0f, Color.red, 
            0.0f, 0.0f, Color.lightGray
        );
        renderer.setSeriesPaint(0, gp0);
        renderer.setSeriesPaint(1, gp1);
        renderer.setSeriesPaint(2, gp2);

        final CategoryAxis domainAxis = plot.getDomainAxis();
        domainAxis.setCategoryLabelPositions(
            CategoryLabelPositions.createUpRotationLabelPositions(Math.PI / 6.0)
        );
        // OPTIONAL CUSTOMISATION COMPLETED.
        
        return chart;
        
    }
    
    // ****************************************************************************
    // * JFREECHART DEVELOPER GUIDE                                               *
    // * The JFreeChart Developer Guide, written by David Gilbert, is available   *
    // * to purchase from Object Refinery Limited:                                *
    // *                                                                          *
    // * http://www.object-refinery.com/jfreechart/guide.html                     *
    // *                                                                          *
    // * Sales are used to provide funding for the JFreeChart project - please    * 
    // * support us so that we can continue developing free software.             *
    // ****************************************************************************
    
    /**
     * Starting point for the demonstration application.
     *
     * @param args  ignored.
     */    

}
}
